@startuml murder_battle_architecture

GameController *-- Game
GameController *-- ActionManager
GameController *-- UserInteraction
GameController --- MessageTextConf
Effect o-- Game
UserInteraction --- MessageScope
Game *-- Citizen
Game *-- Player
Game *-- Spy
Player *-- Card
Player *-- ActionType
Card o-- Effect
ActionManager o-- Effect
Effect *-- EffectStatus


class Game {
    Citizen [] citizens
    Player [] players
    Spy spy
    Player first_player
    int round_number

    'Will be calculated by round number (even or odd)
    +get_active_player()
    +get_passive_player()

}

class MessageTextConf {
}

class ActionManager {
   Effect[] pre_actions
   Effect{round_number : pre_actions} actions_history

   +save_action()
}

class UserInteraction {
   String{MessageScope : text} message_queue

   +print_all()

   +print_global_instant()
   +print_active_instant()
   +print_passive_instant()

   +save_global()
   +save_active()
   +save_passive()

   +read_message()
}

class GameController {
    +Game game
    +ActionManager action_manager
    +UserInteraction user_interaction
    --
    +start_game()
    --
    #_prepare_game()
    --
    #_create_citizens()
    #_set_order()
    #_create_player()
    #_create_spy()
    #_show_game_state()
    --
    #_proceed_game()
    --
    #_show_night_state()
    #_create_action()
    #_create_card_action()
    #_confirm_actions()
    'Find relevant citizens for each effect and add relevant effect into the citizen's Effects list from pre_actions list. Move pre_actions list to actions_history dictionary under the active_round key.
    #_save_actions()
    #_clear_finished_effects()
    #_resolve_effects()
    #_check_win()
    #_count_round()
    --
    #_finish_game()
}

class Citizen {
    #String name
    #int hp

    ' Property (checks if hp > 0)
    +bool is_alive
    
    #Effect [] effects
    #Card citizen_card
}

class Player extends Citizen {
    +Card [] stolen_cards
    +ActionType[] allowed_actions
    +ActionType[] allowed_card_actions

    +create_action()
    -validate_action()

    +create_card_action()
    -validate_card_action()
}

class Spy extends Citizen {

}

class Card {
    String name
    Effect effect
}

class utils {

}

class Effect {
    #Game game
    #str name
    #Player creator
    #int priority
    #Citizen[] targets
    #EffectStatus status
    #int activation_round

    +activate()
    #_activate_impl()
    #_validate()
    +resolve()
    #_resolve_impl()
    +on_clear()
    +deactivate()
}

class DBEffect {

}

class GossipsEffect {

}

class CameraEffect {

}

class BitchEffect {

}

class AlarmEffect {

}

class TrapEffect {

}

class WitnessDefenceEffect {

}

class TheatreEffect {

}

class DrugEffect {

}

class AnonymusCallEffect {

}

class TaxesEffect {

}

class AntidoteEffect {

}

class GangEffect {

}

class FirstNightEffect {

}

class NoneEffect {

}

enum ActionType {
    KILL,
    STEAL,
    STAGING,
    CARD_USAGE
}

enum EffectStatus {
    CREATED,
    ACTIVATED,
    FINISHED
}

enum MessageScope {
    GLOBAL,
    ACTIVE,
    PASSIVE
}
@enduml